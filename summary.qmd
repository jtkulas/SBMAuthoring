# Data Summaries {#sec-summary}

> The narrative around the code is as significant as the code itself

Summaries of your analyses are typically the most important (to external review) aspect of your work. The primary principles of *analyses* within a literate programming framework are:  

1. Preserve the source data
2. Document all manipulations

Below you can find a few **data presentation** enhancements that are enabled via literate programming platforms.  

## Data vizualizations

@fig-kitty demonstrates `lightbox` capabilities for images embedded within literate programming reports, whereby "clicking" isolates the image for closer inspection. This is useful for images that contain fine detail, user devices that may not display optimally, drawing focus to specific data features, and increasing accessibility for visually impaired viewers.

![Data visualization through a literate programming lens](data-vis-tips.png){#fig-kitty .lightbox fig-alt="glasses and horizontal bars representing data visualization inspection"}

@fig-plot highlights standard interactive components for graphical representations of data. These interactive components are fully accessible within the source document/presentation.  

```{r}
#| fig-cap: "Example interactive plot"
#| fig-alt: "An example interactive plot - the scatterpoints provide information upon cursor hover"
#| label: fig-plot
#| echo: false
#| warning: false
#| message: false

library(plotly)

data <- read.csv("https://raw.githubusercontent.com/plotly/datasets/master/school_earnings.csv")

## Scatter (men/women) with size conditioned on gap

plot_ly(data, x=~Men, y=~Women, text=~School, type='scatter', mode='markers', color=~Gap, marker=list(size=~Gap, opacity=0.5))

library(psych)
data(bfi)

bfi$jibberish <- rowMeans(bfi[1:10], na.rm=TRUE)
bfi$gobbleyjook <- rowMeans(bfi[11:20], na.rm=TRUE)

#plot_ly(bfi, x = ~jibberish, y = ~gobbleyjook, text = ~age, type = 'scatter', mode = 'markers', color=~gender, marker = list(size = ~age, opacity = 0.5))

```

@fig-map is another example of interactivity - a map such as this can help reinforce viewer concepts such as *representativeness* within normative samples (e.g., where the data "came from" and who the data represents). The audience can get a sense of geographic representation by "zooming out" or "zooming in" and verifying that only North America is represented within this dataset.  

```{r}
#| fig-cap: "Example normative representation by geographic location."
#| fig-alt: "A geographic map centered on North America - cursor hover provides city information"
#| label: fig-map
#| echo: false
#| warning: false
#| message: false

## data duplicating norms frequencies (number of people in database)

library(leaflet)
library(maps)  ## us.cities data

data(us.cities)

us.cities$industry <- as.factor(sample(c("public", "private", "retail", "manufacturing"), size=1005, replace=TRUE))
  
pal <- colorFactor(
  palette = 'Spectral',
  domain = us.cities$industry
)

## create leaflet map
norms <- leaflet() %>% 
  addProviderTiles("CartoDB.Positron") %>% 
  setView(-98.35, 39.7,
          zoom = 4) %>%
  addTiles() %>%
  addCircles(data=us.cities, lng = ~long, lat = ~lat, weight = 1,
             radius = ~sqrt(pop) * 200, popup = ~name, fillColor=~pal(industry)) %>%
  addLegend("bottomright", data=us.cities, pal = pal, values = ~industry, opacity = 1)

#widgetframe::frameWidget(norms)  ## no pdf picture with frameWidget
norms
```

## Informational Tutorials

@vid-pink shows another example - videos can be pulled from external sites (like this presentation of using `r fontawesome::fa("r-project")` to create and deploy organizational surveys) or can present locally produced video files.

::: {#vid-pink}

{{< video https://www.youtube.com/watch?v=GgW87oQKGQ8&t=630s >}}

Using `r fontawesome::fa("r-project")` to design, deploy, and store survey data

:::
